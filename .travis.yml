# Based on the "trust" template v0.1.1
# https://github.com/japaric/trust/tree/v0.1.1

dist: trusty
language: rust
services: docker
sudo: false

env:
  global:
    - CRATE_NAME=nix
    - CARGO_TEST_THREADS=1

matrix:
  # These are all the build jobs. Adjust as necessary. Comment out what you
  # don't need
  include:
    # Linux
    - env: TARGET=aarch64-unknown-linux-gnu
      rust: 1.13.0
    - env: TARGET=arm-unknown-linux-gnueabi
      rust: 1.13.0
    # - env: TARGET=arm-unknown-linux-musleabi
    - env: TARGET=armv7-unknown-linux-gnueabihf
      rust: 1.13.0
    - env: TARGET=i686-unknown-linux-gnu
      rust: 1.13.0
    - env: TARGET=i686-unknown-linux-musl
      rust: 1.13.0
    - env: TARGET=mips-unknown-linux-gnu
      rust: 1.13.0
    # - env: TARGET=mips64-unknown-linux-gnuabi64
    # - env: TARGET=mips64el-unknown-linux-gnuabi64
    - env: TARGET=mipsel-unknown-linux-gnu
      rust: 1.13.0
    - env: TARGET=powerpc-unknown-linux-gnu
      rust: 1.13.0
    - env: TARGET=powerpc64-unknown-linux-gnu
      rust: 1.13.0
    - env: TARGET=powerpc64le-unknown-linux-gnu
      rust: 1.13.0
    # - env: TARGET=s390x-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: 1.13.0
    - env: TARGET=x86_64-unknown-linux-musl
      rust: 1.13.0

    # OSX
    - env: TARGET=i686-apple-darwin
      rust: 1.13.0
      os: osx
    - env: TARGET=x86_64-apple-darwin
      rust: 1.13.0
      os: osx

    # *BSD
    - env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1
      rust: 1.13.0
    # - env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1 # Uses BuildBot instead
    - env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1
      rust: 1.13.0

    # Testing beta on main targets
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: beta
    - env: TARGET=x86_64-apple-darwin
      os: osx
      rust: beta

    # Testing nightly on main targets (allowed to fail)
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: nightly
    - env: TARGET=x86_64-apple-darwin
      os: osx
      rust: nightly

  # Testing nightlies on main targets. These might fail because of issues
  # with the compiler, so we allow failures here.
  allow_failures:
    # Failures for nightlies may be because of compiler bugs, so don't fail the
    # build if these fail.
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: nightly
    - env: TARGET=x86_64-apple-darwin
      os: osx
      rust: nightly

before_install: set -e

install:
  - sh ci/install.sh

script:
  - bash ci/script.sh

after_script: set +e

before_deploy:
  - sh ci/before_deploy.sh

deploy:
  # TODO update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt GH_TOKEN=0123456789012345678901234567890123456789`
  # - Paste the output down here
  api_key:
    secure: S1ktt0eqmfrEHnYPf4WO7mZtatz/FWfYWBp8nwdc0nd8H6UNZ9Dwy3tJpVe0N9rpB9vAFnkdw6R4jdkIcgxfory2F3F8k/mh8cWn0mkvh2N34YjHMYLnuVzOoFrWai7IcPfROpdlY0tGBlwNj5KMkeBnHUJzd2q4j/4j/tlrfmg=
  file_glob: true
  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
  on:
    # Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    #
    # Here we make it so we never generate binary releases
    condition: $DEPLOY = never
    tags: true
  provider: releases
  skip_cleanup: true

#cache: cargo
#before_cache:
  # Travis can't cache files that are not readable by "others"
  #- chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master
    # bors-ng branches; see https://bors-ng.github.io/getting-started/
    - trying
    - staging

notifications:
  email:
    on_success: never
